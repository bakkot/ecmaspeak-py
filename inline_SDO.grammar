
# ecmaspeak-py/inline_SDO.grammar:
# A grammar for one-line definitions of Syntax Directed Operations.
#
# Copyright (C) 2018  J. Michael Dyck <jmdyck@ibiblio.org>

{START} :
    {LI}$

{LI} :
    <li>\n +{ISDO_RULE}\n +</li>

{ISDO_RULE} :
    The {ISDO_NAME} and {ISDO_NAME} of {EMU_GRAMMAR} is {EXPR}\.
    The {ISDO_NAME} of a {NONTERMINAL} is {NAMED_OPERATION_INVOCATION}\.
    The {ISDO_NAME} of {EMU_GRAMMAR} is {EXPR}, no matter whether white space is present or not\.
    The {ISDO_NAME} of {EMU_GRAMMAR} is {EXPR}\.
    The {ISDO_NAME} of {EMU_GRAMMAR} is {EXPR}\. \(Note that if {NAMED_OPERATION_INVOCATION} is 0, the negative of this MV is also 0\. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point \*\+0\* or \*-0\* as appropriate.\)
    The {ISDO_NAME} of {EMU_GRAMMAR} or of {EMU_GRAMMAR} is {EXPR}\.
    The {ISDO_NAME} of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} is {EXPR}\.
    The {ISDO_NAME} of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} is {EXPR}\.
    The {ISDO_NAME} of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} or of {EMU_GRAMMAR} is {EXPR}\.

{EXPR} :
    {FACTOR} \(a value so large that it will round to \*\+&infin;\*\)
    a sequence consisting of the code units of {NAMED_OPERATION_INVOCATION} followed by the code units of {NAMED_OPERATION_INVOCATION}
    the code unit whose value is {SUM}
    the code unit whose value is determined by the {NONTERMINAL} according to {EMU_XREF}
    the empty code unit sequence
    the negative of {EX}
    the sequence consisting of {CU_LITERAL}
    the sequence consisting of {EX} followed by {EX}
    the sequence consisting of {EX} followed by {EX} followed by {EX}
    the sequence consisting of {EX} followed by {EX} followed by {EX} followed by {EX}
    {EX}
    {EX} followed by {EX}
    {EX} if {CONDITION}\. Otherwise, it is {EXPR}
    {EX}, where {VAR} is {EX}
    {EX}, where {VAR} is {EX} and {VAR} is {EX}
    the UTF16Encoding of the code point value of {NONTERMINAL}
    the UTF16Encoding of {NAMED_OPERATION_INVOCATION}

{CONDITION} :
    either {CONDITION_1} or {CONDITION_1}

{CONDITION_1} :
    {NAMED_OPERATION_INVOCATION} is {U_LITERAL}

{EX} :
    a sequence of up to two code units that is {NAMED_OPERATION_INVOCATION}
    the code units of {NAMED_OPERATION_INVOCATION}
    the code units of {NAMED_OPERATION_INVOCATION} in order
    the number of code points in {PROD_REF}
    {CU_LITERAL}
    {NAMED_OPERATION_INVOCATION}
    {PRODUCT}
    {SUM}
    {U_LITERAL}
    {VAR}
    [0-9]+
    # number-refactoring:
    \d+<sub>ℝ</sub>
    the mathematical integer number of code points in {PROD_REF}
    the mathematical value of the number of code points in {PROD_REF}

{NAMED_OPERATION_INVOCATION} :
    (?:the )?{ISDO_NAME} of {PROD_REF}

{ISDO_NAME} :
    ([A-Z]+)

{PROD_REF} :
    the (first|second|third|fourth) {NONTERMINAL}
    the {NONTERMINAL}
    the {NONTERMINAL} that is that single code point
    the {NONTERMINAL} that is that {NONTERMINAL}
    {NONTERMINAL}

{CU_LITERAL} :
    the code unit 0x[0-9A-F]{4} \([A-Z -]+\)

{U_LITERAL} :
    \*undefined\*

{SUM} :
    {TERM} - {TERM}
    {TERM} plus {TERM}
    {TERM} plus {TERM} plus {TERM} plus {TERM}

    # number-refactoring:
    {VAR}-<sub>ℝ</sub>{VAR}

{TERM} :
    \({PRODUCT}\)
    {FACTOR}

{PRODUCT} :
    {FACTOR} times {FACTOR}
    {FACTOR} &times; {FACTOR}
    -{VAR}
    # number-refactoring:
    {FACTOR} &times;<sub>ℝ</sub> {FACTOR}
    -<sub>ℝ</sub>{VAR}

{FACTOR} :
    0x[0-9A-F]+
    [0-9]+
    \({SUM}\)
    {BASE}<sup>{EX}</sup>
    {NAMED_OPERATION_INVOCATION}
    {VAR}

    # number-refactoring:
    0x[0-9A-F]+<sub>ℝ</sub>
    \d+<sub>ℝ</sub>

{BASE} :
    10
    # number-refactoring:
    10<sub>ℝ</sub>

{VAR} :
    \b(_\w+_)\b

{EMU_GRAMMAR} :
    <emu-grammar>([^<>]+)</emu-grammar>

{EMU_XREF} :
    <emu-xref [^<>]+></emu-xref>

{NONTERMINAL} :
    \|(\w+)\|

